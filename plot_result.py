import matplotlib.pyplot as plt
import numpy as np
from save_load import load, save
import pandas as pd
import seaborn as sns

def bar_plot(label, data1, data2, data3, metric):

    # create data
    df = pd.DataFrame([data1, data2, data3],
                      columns=label)
    df1 = pd.DataFrame()
    df1['Learning Rate (%)'] = [60, 70, 80]
    df = pd.concat((df1, df), axis=1)
    # plot grouped bar chart
    df.plot(x='Learning Rate (%)',
            kind='bar',
            stacked=False)


    plt.ylabel(metric)
    plt.legend(loc='lower left')
    plt.savefig('./Results/'+metric+'.png', dpi=400)
    plt.show(block=False)

def densityplot(actual, predicted, learning_rate):
    plt.figure(figsize=(8, 6))
    sns.kdeplot(actual, color='orange', label='Actual',  fill=True)
    sns.kdeplot(predicted, color='blue', label='Predicted',  fill=True)
    plt.xlabel('Value')
    plt.ylabel('Density')
    plt.title("density plot of Actual vs Predicted values")
    plt.legend()
    plt.savefig(f'Results/Density Plot Dataset-{learning_rate}.png')
    plt.show()

def plotres():
    # learn rate 60, 30
    svm_60 = load('svm_60')
    ann_60 = load('ann_60')
    cnn_60 = load('cnn_60')
    bi_lstm_60 = load('bi_lstm_60')
    proposed_60 = load('proposed_60')

    data_60 = {
        "SVM [18]": svm_60,
        "ANN [19]": ann_60,
        "Bi-LSTM [21]": bi_lstm_60,
        "CNN [22]": cnn_60,
        'PROPOSED': proposed_60

    }

    ind = ['Accuracy', 'Precision', 'Sensitivity', 'Specificity', 'F-Measure', 'NPV', 'FPR', 'FNR']
    table_60 = pd.DataFrame(data_60, index=ind)
    save('table_60', table_60)
    table_60.to_excel('./Results/table_60.xlsx')

    val_60 = np.array(table_60)

    # learn rate 70, 30
    svm_70 = load('svm_70')
    ann_70 = load('ann_70')
    cnn_70 = load('cnn_70')
    bi_lstm_70 = load('bi_lstm_70')
    proposed_70 = load('proposed_70')

    data_70 = {
        "SVM [18]": svm_70,
        "ANN [19]": ann_70,
        "Bi-LSTM [21]": bi_lstm_70,
        "CNN [22]": cnn_70,
        'PROPOSED': proposed_70

    }

    ind = ['Accuracy', 'Precision', 'Sensitivity', 'Specificity', 'F-Measure', 'NPV', 'FPR', 'FNR']
    table_70 = pd.DataFrame(data_70, index=ind)
    save('table_70', table_70)
    table_70.to_excel('./Results/table_70.xlsx')

    val_70 = np.array(table_70)

    # 80, 20 variation
    svm_80 = load('svm_80')
    ann_80 = load('ann_80')
    cnn_80 = load('cnn_80')
    bi_lstm_80 = load('bi_lstm_80')
    proposed_80 = load('proposed_80')

    data_80 = {
        "SVM [18]": svm_80,
        "ANN [19]": ann_80,
        "Bi-LSTM [21]": bi_lstm_80,
        "CNN [22]": cnn_80,
        'PROPOSED': proposed_80
    }

    ind = ['Accuracy', 'Precision', 'Sensitivity', 'Specificity', 'F-Measure', 'NPV', 'FPR', 'FNR']
    table_80 = pd.DataFrame(data_80, index=ind)
    save('table_80', table_80)
    table_80.to_excel('./Results/table_80.xlsx')

    val_80 = np.array(table_80)



    method = ["SVM [18]", "ANN [19]", "Bi-LSTM [21]", "CNN [22]", "PROPOSED"]
    metrices_plot = ['Accuracy', 'Precision', 'Sensitivity', 'Specificity', 'F-Measure',  'NPV', 'FPR', 'FNR']
    metrices = [val_60, val_70, val_80]
    save('met', metrices)

    for i in range(len(metrices_plot)):
        bar_plot(method, metrices[0][i, :], metrices[1][i, :], metrices[2][i, :],
                 metrices_plot[i])

    learn_data = [60, 70, 80]
    for k in learn_data:
        y_test = load(f'y_test_{k}')
        y_pred = load(f'predicted_{k}')
        densityplot(y_test, y_pred, k)


    for i in range(3):
        print('Metrices-Learning rate--' + str(learn_data[i]))
        tab = pd.DataFrame(metrices[i], index=metrices_plot, columns=method)
        print(tab)


