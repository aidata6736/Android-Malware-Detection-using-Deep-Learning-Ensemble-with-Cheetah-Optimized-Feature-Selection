'''
pip install pandas
pip install scikit-learn
'''
import os
os.makedirs('Results', exist_ok=True)
os.makedirs('Saved Data', exist_ok=True)
from datagen import datagen
from Optimization import pro_optimization
from Objective_function import Objective_func_60, Objective_func_70, Objective_func_80
import numpy as np
from save_load import *
from Detection import DSDNN, SVM, Bi_LSTM, CNN, ANN
import matplotlib.pyplot as plt
from plot_result import plotres


def main():
    datagen()

    # learning rate 60 training and 40 testing

    x_train_60 = load('x_train_60')
    y_train_60 = load('y_train_60')
    x_test_60 = load('x_test_60')
    y_test_60 = load('y_test_60')

    # learning rate 70 training and 30 testing

    x_train_70 = load('x_train_70')
    y_train_70 = load('y_train_70')
    x_test_70 = load('x_test_70')
    y_test_70 = load('y_test_70')

    # learning rate 80 training and 20 testing

    x_train_80 = load('x_train_80')
    y_train_80 = load('y_train_80')
    x_test_80 = load('x_test_80')
    y_test_80 = load('y_test_80')


    train_test = [(x_train_60, y_train_60, x_test_60, y_test_60, Objective_func_60),
                  (x_train_70, y_train_70, x_test_70, y_test_70, Objective_func_70),
                  (x_train_80, y_train_80, x_test_80, y_test_80, Objective_func_80)]


    i = 60
    for train_test_set in train_test:
        x_train, y_train, x_test, y_test, fit_func = train_test_set

        lb = np.zeros(x_train.shape[1])
        ub = np.ones(x_train.shape[1])

        pop_size = 50
        prob_size = len(lb)
        epochs = 100

        best_solution, best_fitness = pro_optimization(fit_func, lb, ub, pop_size, prob_size, epochs)

        best_soln = np.round(best_solution)

        optimal_indices = np.where(best_soln == 1)[0]

        selected_x_train = x_train[:, optimal_indices]
        selected_x_test = x_test[:, optimal_indices]

        pred, met, history = DSDNN(selected_x_train, y_train, selected_x_test, y_test)
        save(f'proposed_{i}', met)
        save(f'predicted_{i}', pred)

        plt.figure(figsize=(10, 4))
        plt.subplot(1, 2, 1)
        plt.plot(history.history['accuracy'], label='accuracy')
        plt.plot(history.history['val_accuracy'], label='val_accuracy')
        plt.xlabel('Epoch')
        plt.ylabel('Accuracy')
        plt.ylim([0, 1.3])
        plt.legend(loc='lower right')

        plt.subplot(1, 2, 2)
        plt.plot(history.history['loss'], label='loss')
        plt.plot(history.history['val_loss'], label='loss')
        plt.xlabel('Epoch')
        plt.ylabel('Loss')
        plt.ylim([0, 1.3])
        plt.legend(loc='lower right')
        plt.tight_layout()
        plt.savefig(f'Results/Accuracy Loss Graph Learning rate {i}.png')
        plt.show()


        pred, met = SVM(x_train, y_train, x_test, y_test)  # 18
        save(f'svm_{i}', met)

        pred, met = ANN(x_train, y_train, x_test, y_test)  # 19
        save(f'ann_{i}', met)

        pred, met = Bi_LSTM(x_train, y_train, x_test, y_test)  # 21
        save(f'bi_lstm_{i}', met)

        pred, met = CNN(x_train, y_train, x_test, y_test)  # 22
        save(f'cnn_{i}', met)


        i += 10


a = 0
if a == 1:
    main()

plotres()
plt.show()

