import pandas as pd
import math


def calculate_pressure_trend(pressure1, pressure2):
    if pressure1 < pressure2:
        return 'rising'
    elif pressure1 > pressure2:
        return 'falling'
    else:
        return 'stable'


def calculate_sea_level_pressure(surface_pressure, altitude):
    # Here, we assume a linear decrease of pressure with altitude (standard atmosphere model)
    sea_level_pressure = surface_pressure * (1 - 0.00012 * altitude)
    return sea_level_pressure


# Function to calculate dew point
def calculate_dew_point(temperature, relative_humidity):
    dew_point = temperature - ((100 - relative_humidity) / 5)
    return dew_point


# Function to calculate specific humidity
def calculate_specific_humidity(temperature, relative_humidity, pressure):
    vapor_pressure = (relative_humidity / 100) * 6.112 * math.exp((17.67 * temperature) / (temperature + 243.5))
    specific_humidity = (0.622 * vapor_pressure) / (pressure - (0.378 * vapor_pressure))
    return specific_humidity


def feature_extraction(preprocessed_data):
    # Extract features for Temperature
    temperature_features = pd.DataFrame()
    temperature_features['Diurnal_temperature_variation'] = preprocessed_data['MaxTemp'] - preprocessed_data['MinTemp']
    temperature_features['Mean_temperature'] = (preprocessed_data['MaxTemp'] + preprocessed_data['MinTemp']) / 2
    temperature_features['Temperature_range'] = preprocessed_data['MaxTemp'] - preprocessed_data['MinTemp']

    # Extract features for Humidity
    humidity_features = pd.DataFrame()
    humidity_features['Mean_humidity'] = (preprocessed_data['Humidity9am'] + preprocessed_data['Humidity3pm']) / 2
    dew_points = []
    specific_humidities = []
    for index, row in preprocessed_data.iterrows():
        temperature = (row['MinTemp'] + row['MaxTemp']) / 2  # Average temperature
        humidity_9am = row['Humidity9am']
        humidity_3pm = row['Humidity3pm']

        # Calculate dew point
        dew_point = calculate_dew_point(temperature, humidity_9am)
        dew_points.append(dew_point)

        # Calculate specific humidity
        specific_humidity = calculate_specific_humidity(temperature, humidity_3pm,
                                                        1013.25)  # Assuming atmospheric pressure is 1013.25 hPa
        specific_humidities.append(specific_humidity)

    # Add dew point and specific humidity columns to the DataFrame
    humidity_features['DewPoint'] = dew_points
    humidity_features['SpecificHumidity'] = specific_humidities

    # Extract features for Pressure
    pressure_features = pd.DataFrame()
    pressure_features['PressureTrend'] = preprocessed_data.apply(
        lambda row: calculate_pressure_trend(row['Pressure9am'], row['Pressure3pm']), axis=1)
    pressure_trend_mapping = {'rising': 1, 'falling': -1, 'stable': 0}
    pressure_features['PressureTrend'] = pressure_features['PressureTrend'].map(pressure_trend_mapping)

    pressure_features['SeaLevelPressure'] = preprocessed_data['Pressure9am'].apply(
        lambda pressure: calculate_sea_level_pressure(pressure, 0))

    # Extract features for Cloud Cover
    cloud_features = pd.DataFrame()
    cloud_features['Cloud_cover_percentage'] = (preprocessed_data['Cloud9am'] + preprocessed_data['Cloud3pm']) / 2

    # Extract features for Wind
    # Wind Direction Features
    wind_direction_features= preprocessed_data[['WindDir9am', 'WindDir3pm', 'WindGustDir']]
    # Wind Gusts Features (Numerical)
    wind_gusts_features = preprocessed_data[['WindGustSpeed', 'WindSpeed9am', 'WindSpeed3pm']]
    wind_features = pd.concat([wind_direction_features, wind_gusts_features], axis=1)

    # Extract features for Seasonal and Temporal
    seasonal_features = pd.DataFrame()
    seasonal_features['Day_of_the_week'] = pd.to_datetime(preprocessed_data['Day_of_the_week']).dt.dayofweek
    seasonal_features['Month'] = pd.to_datetime(preprocessed_data['Month']).dt.month

    feature = pd.concat([temperature_features, humidity_features, pressure_features, cloud_features, wind_features, seasonal_features, preprocessed_data['RainToday']], axis=1)
    return feature
